[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
files = "{{ cookiecutter.python_package_name }}/**/*.py,tests/**/*.py"
implicit_reexport = false
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

[tool.poetry]
name = "{{ cookiecutter.python_package_name }}"
version = "{{ cookiecutter.project_version }}"
description = "{{ cookiecutter.project_description }}"
readme = ["README.md", "USAGE.md"]
authors = ["{{ cookiecutter.author_full_name }} <{{ cookiecutter.author_email }}>"]
license = "{{ cookiecutter.project_license }}"
# See https://pypi.org/pypi?%3Aaction=list_classifiers
classifiers = [
    "Development Status :: 3 - Alpha",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Topic :: Utilities",
]
documentation = "https://{{ cookiecutter.pypi_package_name }}.readthedocs.io/en/stable/"
repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.pypi_package_name }}"

[tool.poetry.dependencies]
python = ">={{ cookiecutter.python_version }}"
{%- if cookiecutter.include_executable == "y" %}
colorama = "*"
fire = "*"
{%- endif %}

[tool.poetry.group.dev.dependencies]
autopep8 = "*"
mypy = ">=1.8"
poethepoet = ">=0.24"
pylint = ">=3.0"
pytest = "*"
ruff = "*"
{%- if cookiecutter.include_executable == "y" %}
types-colorama = "*"
{%- endif %}

[tool.poetry.group.doc.dependencies]
myst-parser = ">=2.0.0"
sphinx = ">=7.1.2,<7.2.0"
sphinx-autoapi = ">=3.3"
sphinx-rtd-theme = ">=3.0"

{% if cookiecutter.include_executable == "y" -%}
[tool.poetry.scripts]
{{ cookiecutter.executable_name }} = "{{ cookiecutter.python_package_name }}.cli:run"
hello = "{{ cookiecutter.python_package_name }}.cli:hello"

{% endif -%}
[tool.poe]
verbosity = -1

[tool.poe.tasks]
tasks.cmd = "poe -v"
tasks.help = "List available tasks"
{% if cookiecutter.include_executable == "y" -%}
cli.script = "{{ cookiecutter.python_package_name }}.cli:run"
cli.help = "Run command line interface"
{% endif -%}
doc.shell = """
    set -ex
    rm -rf build/html build/man
    sphinx-build -aqEW -b html doc/sphinx build/html
    sphinx-build -qW -b man doc/sphinx build/man
"""
doc.help = "Generate documentation"
formatcheck.cmd = "ruff format --check"
formatcheck.help = "Check for formatting style violations not covered by the linter"
{% if cookiecutter.include_executable == "y" -%}
hello.script = "{{ cookiecutter.python_package_name }}.cli:hello"
hello.help = "Run hello"
{% endif -%}
html.script = "webbrowser:open('build/html/index.html')"
html.help = "Browse HTML documentation"
linter.cmd = "pylint --enable-all-extensions {{ cookiecutter.python_package_name }}"
linter.help = "Check for style violations"
man.cmd = "man build/man/
{%- if cookiecutter.include_executable == "y" -%}
    {{ cookiecutter.executable_name }}.1
{%- else -%}
    {{ cookiecutter.pypi_package_name }}.3
{%- endif -%}
"
man.help = "Open manual page"
tests.cmd = "pytest"
tests.help = "Run test suite"
typecheck.cmd = "mypy"
typecheck.help = "Run static type checker"

[tool.pyright]
reportUnsupportedDunderAll = "none"

[tool.pytest.ini_options]
testpaths = "tests"
xfail_strict = true

[tool.ruff]
line-length = 72

[tool.ruff.format]
quote-style = "single"
